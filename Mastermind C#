namespace BovineCodeCracker
{
using System;
using System.Collections.Generic; using System.ComponentModel; using System.Data;
using System.Drawing; using System.Linq; using System.Media; using System.Text;
using System.Threading.Tasks; using System.Windows.Forms;

/// <summary>
/// The form on which the player sets their secret code.
/// </summary>
public partial class CodeEnterScreen : Form
{
/// <summary>
/// A reference to the GameControl form.
/// </summary>
private GameController gameControl;

/// <summary>
/// A contextual reference to the player whose turn it currently is at any given moment.
/// </summary>
private Player whoseTurn;

/// <summary>
/// A list of all Pickers on this form.
/// </summary>
private List<Picker> pickers;

/// <summary>
/// A list of single-character-long textboxes arranged in a series, for inputting a secret code.
/// </summary>
private List<TextBox> codeEntryList = new List<TextBox>();

/// <summary>
/// The "generate code" sound effect.
/// </summary>
Private SoundPlayer soundGenerate	=new SoundPlayer(BovineCodeCracker.Properties.Resources._387217 spiceprogram ping_1);

/// <summary>
/// The "confirm" sound effect.
/// </summary>
Private SoundPlayer soundConfirm	=new SoundPlayer(BovineCodeCracker.Properties.Resources._387216 spiceprogram pock_1);

/// <summary>
/// An integer similar to the SquareSize on the gameBoard, but this one does not grow or shrink.
/// </summary>
private int specialSquareSize = 58;

/// <summary>
/// A string for compiling the user's input, prior to validating and prior to becoming the player's secret code.
/// </summary>
private string codeText;
/// <summary>
/// Initializes a new instance of the CodeEnterScreen class.
/// </summary>
/// <param name="gameControl">A reference to the GameControl form.</param>
/// <param name="whoseTurn">A reference to the player whose turn it currently is.</param> public CodeEnterScreen(GameController gameControl, Player whoseTurn)
{
this.InitializeComponent(); this.gameControl = gameControl; this.whoseTurn = whoseTurn;

if (!gameControl.ActivePlayer.IsHuman)
{
this.Text = whoseTurn.Name + " is Picking a Code.";
}
else
{
this.Text = whoseTurn.Name + ", Enter Secret Code";
}

this.UpdateMessage();

this.StartPosition = FormStartPosition.CenterScreen; this.DrawPickerBox();
this.DrawEntryBoxes();

if (gameControl.Versus == false)
{
gameControl.ActivePlayer.SecretCode = string.Empty; this.GenerateSecretCode();
}

this.codeEntryList.First().Focus();
}

/// <summary>
/// Gets or sets the Pickers list.
/// </summary>
public List<Picker> Pickers
{
get
{
return this.pickers;
}

set
{
this.pickers = value;
}
}

/// <summary>
/// Selects a Picker by its ID number.
/// </summary>
/// <param name="id">The Picker's id.</param>
/// <returns>A Picker.</returns> public Picker GetPickerByID(int id)
{
foreach (Picker p in this.Pickers)
{
if (p.Id == id)
{
p.BackColor = Color.Cyan;
 
return p;
}
}

return null;
}

/// <summary>
/// Updates the message on the form.
/// </summary>
private void UpdateMessage()
{
this.labelMessage.TextAlign = ContentAlignment.MiddleCenter;

if (this.gameControl.Versus == false)
{
this.labelMessage.Text = this.gameControl.ActivePlayer.Name + " Please wait...";
}
else if (this.gameControl.Versus == true && this.gameControl.ActivePlayer.IsHuman == true && this.gameControl.Opponent.IsHuman == false)
{
this.labelMessage.Text = this.gameControl.ActivePlayer.Name + ", please choose your secret code.";
}
else if (this.gameControl.Versus == true && this.gameControl.ActivePlayer.IsHuman == false && this.gameControl.Opponent.IsHuman == true)
{
this.labelMessage.Text = this.gameControl.ActivePlayer.Name + ", please choose your secret code.";

this.AIclicks();
}
else if (this.gameControl.Versus == true && this.gameControl.ActivePlayer.IsHuman == true && this.gameControl.Opponent.IsHuman == true)
{
this.labelMessage.Text = this.gameControl.Opponent.Name + ", please look away " + "\n" + "while " + this.gameControl.ActivePlayer.Name + "chooses their secret code.";
}
}

/// <summary>
/// Draws the entry boxes.
/// </summary>
private void DrawEntryBoxes()
{
IntToSymbol its = new IntToSymbol(); int xPos = 20;
for (int i = 0; i < this.gameControl.CodeLength; i++)
{
TextBox textboxEntry = new TextBox(); textboxEntry.Location = new Point(xPos, 150);
textboxEntry.Font = new Font("Century Gothic", 28, FontStyle.Bold); textboxEntry.Width = this.specialSquareSize;
textboxEntry.Height = this.specialSquareSize; textboxEntry.Text = "[ ]";
textboxEntry.BorderStyle = BorderStyle.FixedSingle; textboxEntry.TextAlign = HorizontalAlignment.Center; textboxEntry.MaxLength = 1;

textboxEntry.Click += (s, z) =>
{
textboxEntry.Text = gameControl.ActivePlayer.SelectedPicker.Text; soundConfirm.Play();
};
textboxEntry.TextChanged += (s, z) =>
{
 

int tempInt;

bool result = int.TryParse(textboxEntry.Text.ToString(), out tempInt); if (result == true)
{
soundConfirm.Play();
textboxEntry.Text = its.convert(tempInt); foreach (Picker p in Pickers)
{
if (p.Id == tempInt)
{
gameControl.ActivePlayer.SelectedPicker = p; p.BackColor = Color.Cyan;
}
else
{
p.BackColor = p.InitialColor;
}
}
}

buttonSubmit.Focus();
};

xPos = xPos + this.specialSquareSize;

this.Controls.Add(textboxEntry); textboxEntry.Name = textboxEntry.Name + i; this.codeEntryList.Add(textboxEntry);

 

150);
 
this.buttonSubmit.Location = new Point((this.specialSquareSize * this.gameControl.CodeLength) + 20,

this.buttonSubmit.Width = this.specialSquareSize * 2;
this.buttonGenerateCode.Width	=	(this.specialSquareSize	*	this.gameControl.CodeLength)	+
 
(this.specialSquareSize * 2);
this.Width = (this.specialSquareSize * this.gameControl.CodeLength) + (this.specialSquareSize * 3);
}
}

/// <summary>
/// The click event for the submit button.
/// </summary>
/// <param name="sender">The Sender</param>
/// <param name="e">The event arguments</param>
private void buttonSubmit_Click(object sender, EventArgs e)
{
if (this.gameControl.ActivePlayer.SecretCode == string.Empty)
{
foreach (TextBox tb in this.codeEntryList)
{
this.codeText = this.codeText + tb.Text;
}

var uniques = (new HashSet<char>(this.codeText)).Count;

if (uniques != this.gameControl.CodeLength)
{
MessageBox.Show("No repeating characters allowed."); this.codeText = string.Empty;
}
else
{
 

this.gameControl.ActivePlayer.SecretCode = this.codeText;
}
}

if (this.gameControl.Versus == true)
{
// If P1's code is set, but P2's code is not, change turns, close screen, and reopen this screen again.
if	(this.gameControl.ActivePlayer.SecretCode	!=	string.Empty	&& this.gameControl.Opponent.SecretCode == string.Empty)
{
this.gameControl.ChangeTurns();
CodeEnterScreen	player2CodeEnterScreen	=	new	CodeEnterScreen(this.gameControl, this.gameControl.ActivePlayer);
player2CodeEnterScreen.Show(); this.Close();
}

// If both players have their codes entered, open a new GameBoard.
if	(this.gameControl.ActivePlayer.SecretCode	!=	string.Empty	&& this.gameControl.Opponent.SecretCode != string.Empty)
{
GameBoard gameBoard = new GameBoard(this.gameControl); this.gameControl.ChangeTurns();
gameBoard.Show(); this.Close();
}
}
else
{
// Game is in single player mode.
if (this.gameControl.ActivePlayer.SecretCode != string.Empty)
{
GameBoard gameBoard = new GameBoard(this.gameControl); gameBoard.Show();
gameBoard.BringToFront(); gameBoard.Focus(); this.Close();
}
}
}

/// <summary>
/// The click event for the Generate Code button.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void buttonGenerateCode_Click(object sender, EventArgs e)
{
this.soundGenerate.Play(); this.gameControl.ActivePlayer.SecretCode = string.Empty; this.GenerateSecretCode();
if (this.gameControl.ActivePlayer.IsHuman == false)
{
for (int i = 0; i < this.gameControl.CodeLength; i++)
{
// Don't show the secret code.
}
}
else
{
for (int i = 0; i < this.gameControl.CodeLength; i++)
{
foreach (TextBox tb in this.codeEntryList)
{
 

if (tb.Name.Contains(i.ToString()))
{
tb.Text = this.gameControl.ActivePlayer.SecretCode[i].ToString();
}
}
}

SendKeys.Send("{TAB}");
}
}

/// <summary>
/// Generates a Secret Code instead of manually picking it.
/// </summary>
private void GenerateSecretCode()
{
IntToSymbol its = new IntToSymbol(); Random rand = new Random();
List<int>	randomNumbers	=	Enumerable.Range(0,	this.gameControl.CodeDepth).OrderBy(x	=> rand.Next()).Take(this.gameControl.CodeDepth).ToList();

for (int i = 0; i < this.gameControl.CodeLength; i++)
{

int tempChar = randomNumbers[rand.Next(0, randomNumbers.Count() - 1)]; string symbol = its.convert(tempChar);
if (this.gameControl.Versus == true)
{
this.gameControl.ActivePlayer.SecretCode = this.gameControl.ActivePlayer.SecretCode + symbol;
}
else
{
this.gameControl.ActivePlayer.SecretCode = this.gameControl.ActivePlayer.SecretCode + "0"; // You have to give the player some code, even though it's not used.
this.gameControl.Opponent.SecretCode = this.gameControl.Opponent.SecretCode + symbol;
}

randomNumbers.Remove(tempChar);
}

buttonSubmit.Enabled = true;

if (this.gameControl.Versus == false)
{
buttonSubmit.Focus(); SendKeys.Send("{ENTER}");
}
}

/// <summary>
/// Draws the box of Pickers.
/// </summary>
private void DrawPickerBox()
{
IntToSymbol its = new IntToSymbol(); this.Pickers = new List<Picker>();
int pickerXpos = 20;

for (int i = 0; i < this.gameControl.CodeDepth; i++)
{
Picker picker = new Picker(this, this.gameControl, i); picker.Name = "Picker" + i;
 

picker.Text = its.convert(i);

picker.Width = 35;
picker.Height = 35;

picker.Location = new Point(pickerXpos, 0); pickerXpos = pickerXpos + 35; this.Controls.Add(picker); this.Pickers.Add(picker);
}

this.gameControl.ActivePlayer.SelectedPicker = this.GetPickerByID(0);
}

/// <summary>
/// A little wait utility.
/// </summary>
/// <param name="waitTime">Wait time.</param>
/// <returns>An asynchronous Task.</returns> private async Task TaskDelay(int waitTime)
{
await Task.Delay(waitTime);
}

/// <summary>
/// The AI's ability to use the form.
/// </summary>
private async void AIclicks()
{
await this.TaskDelay(10); buttonGenerateCode.Focus();

SendKeys.SendWait("{ENTER}"); await this.TaskDelay(5); buttonGenerateCode.Enabled = false;

await this.TaskDelay(5); buttonSubmit.Focus(); SendKeys.SendWait("{ENTER}"); await this.TaskDelay(5); buttonSubmit.Enabled = false;
}
}
}

namespace BovineCodeCracker
{
using System;
using System.Collections.Generic; using System.ComponentModel; using System.Data;
using System.Drawing; using System.Linq; using System.Text;
using System.Threading.Tasks; using System.Windows.Forms;

/// <summary>
/// The GameController form.
/// </summary>
public partial class GameController : Form
{
/// <summary>

/// Player 1.
/// </summary> private Player p1;

/// <summary>
/// Player 2.
/// </summary> private Player p2;

/// <summary>
/// The active player whose turn it is.
/// </summary>
private Player activePlayer;

/// <summary>
/// The active player's opponent, whose turn it is not.
/// </summary>
private Player opponent;

/// <summary>
/// A value indicating whether or not Versus mode is active.
/// </summary> private bool versus;

/// <summary>
/// The length of the code.
/// </summary>
private int codeLength;

/// <summary>
/// The depth of the code. (How many unique symbols?)
/// </summary> private int codeDepth;

/// <summary>
/// The number of attempts allowed in a game.
/// </summary>
private int attemptsAllowed;

/// <summary>
/// Initializes a new instance of the GameController class.
/// </summary>
public GameController()
{
this.InitializeComponent();
this.StartPosition = FormStartPosition.CenterScreen; this.comboBoxStyle.SelectedItem = "Classic"; this.checkBoxP1isHuman.Checked = true; this.checkBoxP2isHuman.Checked = false; this.radioButtonVersus.Checked = true;

this.textBoxP1name.Text = "Player One"; this.textBoxP2name.Text = "BessieBot";
}

/// <summary>
/// Gets or sets p1.
/// </summary> public Player P1
{
get
{
return this.p1;
}

set
{
this.p1 = value;
}
}

/// <summary>
/// Gets or sets p2.
/// </summary> public Player P2
{
get
{
return this.p2;
}

set
{
this.p2 = value;
}
}

/// <summary>
/// Gets or sets activePlayer.
/// </summary>
public Player ActivePlayer
{
get
{
return this.activePlayer;
}

set
{
this.activePlayer = value;
}
}

/// <summary>
/// Gets or sets opponent.
/// </summary>
public Player Opponent
{
get
{
return this.opponent;
}

set
{
this.opponent = value;
}
}

/// <summary>
/// Gets or sets a value indicating whether or not Versus mode is true.
/// </summary> public bool Versus
{
get
{
return this.versus;
}

set
{
this.versus = value;
}
}

/// <summary>
/// Gets or sets codeLength.
/// </summary>
public int CodeLength
{
get
{
return this.codeLength;
}

set
{
this.codeLength = value;
}
}

/// <summary>
/// Gets or sets codeDepth.
/// </summary> public int CodeDepth
{
get
{
return this.codeDepth;
}

set
{
this.codeDepth = value;
}
}

/// <summary>
/// Gets or sets AttemptsAllowed.
/// </summary>
public int AttemptsAllowed
{
get
{
return this.attemptsAllowed;
}

set
{
this.attemptsAllowed = value;
}
}

/// <summary>
/// Changes Turns.
/// </summary>
public void ChangeTurns()
{
this.ActivePlayer.CurrentGuess = string.Empty; if (this.ActivePlayer == this.P1)
{
this.ActivePlayer = this.P2;
 

this.Opponent = this.P1;
}
else
{
this.ActivePlayer = this.P1; this.Opponent = this.P2;
}
}

/// <summary>
/// The Submit button click event.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void buttonSubmit_Click(object sender, EventArgs e)
{
this.P1 = new Player(textBoxP1name.Text.ToString(), this.checkBoxP1isHuman.Checked); this.P2 = new Player(textBoxP2name.Text.ToString(), this.checkBoxP2isHuman.Checked); this.P1.AttemptsUsed = 0;
this.P2.AttemptsUsed = 0;

// Begin with P1's turn. this.ActivePlayer = this.P1; this.Opponent = this.P2;

this.CodeLength = int.Parse(this.comboBoxCodeLength.SelectedItem.ToString()); this.CodeDepth = int.Parse(this.comboBoxCodeDepth.SelectedItem.ToString()); this.AttemptsAllowed = int.Parse(this.comboBoxGuesses.SelectedItem.ToString());

this.Versus = radioButtonVersus.Checked;

CodeEnterScreen codeEnter = new CodeEnterScreen(this, this.ActivePlayer); codeEnter.ShowDialog();
}

/// <summary>
/// The Versus radio button.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void radioButtonVersus_CheckedChanged(object sender, EventArgs e)
{
if (radioButtonVersus.Checked)
{
this.groupBoxP2.Enabled = true; this.labelP2name.Enabled = true; this.textBoxP2name.Enabled = true; this.checkBoxP2isHuman.Enabled = true;
}
else
{
this.groupBoxP2.Enabled = false; this.labelP2name.Enabled = false; this.textBoxP2name.Enabled = false; this.checkBoxP2isHuman.Enabled = false;
}
}

/// <summary>
/// The Code Depth.
/// </summary>
/// <param name="sender">The Sender</param>
/// <param name="e">The event arguments.</param>
private void comboBoxCodeDepth_SelectedIndexChanged(object sender, EventArgs e)
 

{
// Code Depth cannot be less than code length, because we do not use a character more than once.
if	(int.Parse(this.comboBoxCodeDepth.SelectedItem.ToString())	<
int.Parse(this.comboBoxCodeLength.SelectedItem.ToString()))
{
this.comboBoxCodeLength.SelectedItem = this.comboBoxCodeDepth.SelectedItem;
}
}

/// <summary>
/// The Code Length comboBox.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void comboBoxCodeLength_SelectedIndexChanged(object sender, EventArgs e)
{
if	(comboBoxCodeDepth.SelectedItem	!=	null	&& int.Parse(comboBoxCodeLength.SelectedItem.ToString()) > int.Parse(comboBoxCodeDepth.SelectedItem.ToString()))
{
comboBoxCodeDepth.SelectedItem = comboBoxCodeLength.SelectedItem;
}
}

/// <summary>
/// Player 2's "is human" checkbox.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void checkBoxP2isHuman_CheckedChanged(object sender, EventArgs e)
{
if (this.checkBoxP2isHuman.Checked == true)
{
this.textBoxP2name.Enabled = true; this.textBoxP2name.Text = "Player Two";
}
else
{
this.textBoxP2name.Enabled = false; this.textBoxP2name.Text = "BessieBot";
}
}

/// <summary>
/// The "Game Style".
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void comboBoxStyle_SelectedIndexChanged(object sender, EventArgs e)
{
switch (comboBoxStyle.SelectedIndex)
{
case 0:	// Classic
comboBoxCodeLength.Enabled = false; comboBoxCodeDepth.Enabled = false; comboBoxGuesses.Enabled = false; comboBoxCodeLength.SelectedItem = "4";
comboBoxCodeDepth.SelectedItem = "6";
comboBoxGuesses.SelectedItem = "8"; break;
case 1:	// Deluxe
comboBoxCodeLength.Enabled = false; comboBoxCodeDepth.Enabled = false; comboBoxGuesses.Enabled = false; comboBoxCodeLength.SelectedItem = "5"; 
comboBoxCodeDepth.SelectedItem = "10";
comboBoxGuesses.SelectedItem = "12"; break;
case 2:	// Supreme
comboBoxCodeLength.Enabled = false; comboBoxCodeDepth.Enabled = false; comboBoxGuesses.Enabled = false; comboBoxCodeLength.SelectedItem = "6";
comboBoxCodeDepth.SelectedItem = "10";
comboBoxGuesses.SelectedItem = "14"; break;
case 3:	// Glacial
comboBoxCodeLength.Enabled = false; comboBoxCodeDepth.Enabled = false; comboBoxGuesses.Enabled = false; comboBoxCodeLength.SelectedItem = "10";
comboBoxCodeDepth.SelectedItem = "10";
comboBoxGuesses.SelectedItem = "16"; break;
case 4:	// Custom
comboBoxCodeLength.Enabled = true; comboBoxCodeDepth.Enabled = true; comboBoxGuesses.Enabled = true; break;
}
}

/// <summary>
/// The click event for "how to play" button.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param>
private void buttonHowToPlay_Click(object sender, EventArgs e)
{
HowToPlay howTo = new HowToPlay(); howTo.Show();
}

/// <summary>
/// The click event for the Exit button.
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="e">The event arguments.</param> private void buttonExit_Click(object sender, EventArgs e)
{
DialogResult dialogResult = MessageBox.Show("Are you sure you want to quit?", "Quit", MessageBoxButtons.YesNo);
if (dialogResult == DialogResult.Yes)
{
this.Close();
}
}
}
}
